
/**
 * 常用的设计模式  通过接口 规范操作流程
 * 场景： 支付
 * 支付有一个标准的支付流程
 * 1：组装参数 标准化
 * 2：支付
 * 3：支付完成回调
 * 流程是标准的，但是不同的支付渠道有可能内部的逻辑是不同的 针对这个场景设计一个框架。
 *
 * 首先 抽象出一个支付接口 Pay
 * 设计一个抽象类 AbstractChinaPay （适配国内的支付流程） 可以动态扩展国外的支付流程
 * 具体的支付渠道可以通过继承实现AbstractChinaPay抽象类的抽象方法 来实现具体的业务逻辑。
 *
 * 使用该设计模式 以后扩展新的支付渠道的时候可以直接通过继承AbstractChinaPay来实现具体业务操作。
 * */
package com.wdk.util.design.pattern.pay;